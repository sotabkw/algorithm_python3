# 東京の下町に長テーブルで有名な老舗うなぎ屋がありました。

# そのうなぎ屋にはとても大きい長テーブルがあり、テーブルの周りにn個の座席が配置されています。
# 座席には、時計回りに1, 2, …, nと番号が振られています。
# 座席はテーブルの周りに配置されているので、座席番号nの座席と1の座席は隣接しています。（下記図を参照の事）


# 今、m個のグループの人達が座席に順番に座りに来ます。i番目(1≦i≦m)のグループの人数をa_i人とします。
# 彼らは、長テーブルに並んだ座席の内、ある連続するa_i個の座席に一斉に座ろうとします。

# ただしお客さんは江戸っ子なので、それら座席のうち、いずれか一つでも既に先客に座られている座席があった場合、
# 一人も座らずにグループ全員で怒って帰ってしまいます。江戸っ子は気が早いんでぃ。

# 入力では、i番目のグループが座ろうとする連続した座席の位置は、整数b_iにより指定されます。
# i番目のグループは、座席番号b_iの座席を始点として、そこから時計回りにa_i個分の座席に座ろうとします。

# 最後のグループが座りに来た後、無事に長テーブルの座席に着席出来ている人数を出力するプログラムを作成してください。

# 入力例1
# 6 3
# 3 2
# 1 6
# 2 5

# 出力例1
# 4

# 入力例2
# 12 6
# 4 6
# 4 8
# 4 10
# 4 12
# 4 2
# 4 4

# 出力例2
# 12

num_s, num_g = input().split()

num_s = int(num_s)
num_g = int(num_g)

seats = [False] * num_s

# グループの数だけ繰り返す
for _ in range(num_g):
    # 人数と始点の入力を受け取り、int型に変換
    num, init = [int(x) for x in input().split()]

    # リストをスライスし、Trueが無いか判定
    if not True in seats[init - 1: init + num - 1]:  # Trueが無い時
        # 全てTrueに変換
        seats[init - 1: init + num - 1] = [True] * num

# seatsの中のTrueをカウントして出力
print(seats.count(True))
